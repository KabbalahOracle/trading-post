diff --git a/node_modules/vue-loader/dist/plugin.js b/node_modules/vue-loader/dist/plugin.js
index fbd69e2..90993d2 100644
--- a/node_modules/vue-loader/dist/plugin.js
+++ b/node_modules/vue-loader/dist/plugin.js
@@ -1,167 +1,197 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-const querystring_1 = __importDefault(require("querystring"));
-const RuleSet = require('webpack/lib/RuleSet');
-const id = 'vue-loader-plugin';
-const NS = 'vue-loader';
+const qs = require('querystring')
+const id = 'vue-loader-plugin'
+const NS = 'vue-loader'
+const BasicEffectRulePlugin = require('webpack/lib/rules/BasicEffectRulePlugin')
+const BasicMatcherRulePlugin = require('webpack/lib/rules/BasicMatcherRulePlugin')
+const RuleSetCompiler = require('webpack/lib/rules/RuleSetCompiler')
+const UseEffectRulePlugin = require('webpack/lib/rules/UseEffectRulePlugin')
+
+const ruleSetCompiler = new RuleSetCompiler([
+    new BasicMatcherRulePlugin('test', 'resource'),
+    new BasicMatcherRulePlugin('include', 'resource'),
+    new BasicMatcherRulePlugin('exclude', 'resource', true),
+    new BasicMatcherRulePlugin('resource'),
+    new BasicMatcherRulePlugin('conditions'),
+    new BasicMatcherRulePlugin('resourceQuery'),
+    new BasicMatcherRulePlugin('realResource'),
+    new BasicMatcherRulePlugin('issuer'),
+    new BasicMatcherRulePlugin('compiler'),
+    new BasicEffectRulePlugin('type'),
+    new BasicEffectRulePlugin('sideEffects'),
+    new BasicEffectRulePlugin('parser'),
+    new BasicEffectRulePlugin('resolve'),
+    new UseEffectRulePlugin()
+])
+
 class VueLoaderPlugin {
-    apply(compiler) {
-        // inject NS for plugin installation check in the main loader
+    apply (compiler) {
+        // add NS marker so that the loader can detect and report missing plugin
         compiler.hooks.compilation.tap(id, compilation => {
-            compilation.hooks.normalModuleLoader.tap(id, (loaderContext) => {
-                loaderContext[NS] = true;
-            });
-        });
-        const rawRules = compiler.options.module.rules;
-        // use webpack's RuleSet utility to normalize user rules
-        const rules = new RuleSet(rawRules).rules;
-        // find the rule that applies to vue files
-        let vueRuleIndex = rawRules.findIndex(createMatcher(`foo.vue`));
-        if (vueRuleIndex < 0) {
-            vueRuleIndex = rawRules.findIndex(createMatcher(`foo.vue.html`));
-        }
-        const vueRule = rules[vueRuleIndex];
-        if (!vueRule) {
-            throw new Error(`[VueLoaderPlugin Error] No matching rule for .vue files found.\n` +
-                `Make sure there is at least one root-level rule that matches .vue or .vue.html files.`);
+            const normalModuleLoader = require('webpack/lib/NormalModule').getCompilationHooks(compilation).loader
+            normalModuleLoader.tap(id, loaderContext => {
+                loaderContext[NS] = true
+            })
+        })
+
+        const rules = compiler.options.module.rules
+        let rawVueRules
+        let vueRules = []
+
+        for (const rawRule of rules) {
+            // skip the `include` check when locating the vue rule
+            const clonedRawRule = Object.assign({}, rawRule)
+            delete clonedRawRule.include
+
+            const ruleSet = ruleSetCompiler.compile([{
+                rules: [clonedRawRule]
+            }])
+            vueRules = ruleSet.exec({
+                resource: 'foo.vue'
+            })
+
+            if (!vueRules.length) {
+                vueRules = ruleSet.exec({
+                    resource: 'foo.vue.html'
+                })
+            }
+            if (vueRules.length > 0) {
+                if (rawRule.oneOf) {
+                    throw new Error(
+                        `[VueLoaderPlugin Error] vue-loader 15 currently does not support vue rules with oneOf.`
+                    )
+                }
+                rawVueRules = rawRule
+                break
+            }
         }
-        if (vueRule.oneOf) {
-            throw new Error(`[VueLoaderPlugin Error] vue-loader 15 currently does not support vue rules with oneOf.`);
+        if (!vueRules.length) {
+            throw new Error(
+                `[VueLoaderPlugin Error] No matching rule for .vue files found.\n` +
+                `Make sure there is at least one root-level rule that matches .vue or .vue.html files.`
+            )
         }
+
         // get the normlized "use" for vue files
-        const vueUse = vueRule.use;
+        const vueUse = vueRules.filter(rule => rule.type === 'use').map(rule => rule.value)
+
         // get vue-loader options
         const vueLoaderUseIndex = vueUse.findIndex(u => {
-            return /^vue-loader|(\/|\\|@)vue-loader/.test(u.loader || '');
-        });
+            return /^vue-loader|(\/|\\|@)vue-loader/.test(u.loader)
+        })
+
         if (vueLoaderUseIndex < 0) {
-            throw new Error(`[VueLoaderPlugin Error] No matching use for vue-loader is found.\n` +
-                `Make sure the rule matching .vue files include vue-loader in its use.`);
+            throw new Error(
+                `[VueLoaderPlugin Error] No matching use for vue-loader is found.\n` +
+                `Make sure the rule matching .vue files include vue-loader in its use.`
+            )
         }
-        const vueLoaderUse = vueUse[vueLoaderUseIndex];
-        const vueLoaderOptions = (vueLoaderUse.options =
-            vueLoaderUse.options || {});
+
+        // make sure vue-loader options has a known ident so that we can share
+        // options by reference in the template-loader by using a ref query like
+        // template-loader??vue-loader-options
+        const vueLoaderUse = vueUse[vueLoaderUseIndex]
+        vueLoaderUse.ident = 'vue-loader-options'
+        vueLoaderUse.options = vueLoaderUse.options || {}
+
         // for each user rule (expect the vue rule), create a cloned rule
         // that targets the corresponding language blocks in *.vue files.
-        const clonedRules = rules.filter(r => r !== vueRule).map(cloneRule);
-        // rule for template compiler
-        const templateCompilerRule = {
-            loader: require.resolve('./templateLoader'),
-            test: /\.vue$/,
-            resourceQuery: (query) => {
-                const parsed = querystring_1.default.parse(query.slice(1));
-                return parsed.vue != null && parsed.type === 'template';
-            },
-            options: vueLoaderOptions
-        };
-        // for each rule that matches plain .js files, also create a clone and
-        // match it against the compiled template code inside *.vue files, so that
-        // compiled vue render functions receive the same treatment as user code
-        // (mostly babel)
-        const matchesJS = createMatcher(`test.js`);
-        const jsRulesForRenderFn = rules
-            .filter(r => r !== vueRule && matchesJS(r))
-            .map(cloneRuleForRenderFn);
-        // pitcher for block requests (for injecting stylePostLoader and deduping
-        // loaders matched for src imports)
+        const refs = new Map()
+        const clonedRules = rules
+            .filter(r => r !== rawVueRules)
+            .map((rawRule) => cloneRule(rawRule, refs))
+
+        // fix conflict with config.loader and config.options when using config.use
+        delete rawVueRules.loader
+        delete rawVueRules.options
+        rawVueRules.use = vueUse
+
+        // global pitcher (responsible for injecting template compiler loader & CSS
+        // post loader)
         const pitcher = {
             loader: require.resolve('./pitcher'),
-            resourceQuery: (query) => {
-                const parsed = querystring_1.default.parse(query.slice(1));
-                return parsed.vue != null;
+            resourceQuery: query => {
+                const parsed = qs.parse(query.slice(1))
+                return parsed.vue != null
+            },
+            options: {
+                cacheDirectory: vueLoaderUse.options.cacheDirectory,
+                cacheIdentifier: vueLoaderUse.options.cacheIdentifier
             }
-        };
+        }
+
         // replace original rules
         compiler.options.module.rules = [
             pitcher,
-            ...jsRulesForRenderFn,
-            templateCompilerRule,
             ...clonedRules,
             ...rules
-        ];
+        ]
     }
 }
-VueLoaderPlugin.NS = NS;
-function createMatcher(fakeFile) {
-    return (rule) => {
-        // #1201 we need to skip the `include` check when locating the vue rule
-        const clone = Object.assign({}, rule);
-        delete clone.include;
-        const normalized = RuleSet.normalizeRule(clone, {}, '');
-        return !rule.enforce && normalized.resource && normalized.resource(fakeFile);
-    };
-}
-function cloneRule(rule) {
-    const resource = rule.resource;
-    const resourceQuery = rule.resourceQuery;
-    // Assuming `test` and `resourceQuery` tests are executed in series and
-    // synchronously (which is true based on RuleSet's implementation), we can
-    // save the current resource being matched from `test` so that we can access
-    // it in `resourceQuery`. This ensures when we use the normalized rule's
-    // resource check, include/exclude are matched correctly.
-    let currentResource;
-    const res = Object.assign(Object.assign({}, rule), { resource: {
-            test: (resource) => {
-                currentResource = resource;
-                return true;
-            }
-        }, resourceQuery: (query) => {
-            const parsed = querystring_1.default.parse(query.slice(1));
-            if (parsed.vue == null) {
-                return false;
-            }
-            if (resource && parsed.lang == null) {
-                return false;
-            }
-            const fakeResourcePath = `${currentResource}.${parsed.lang}`;
-            if (resource && !resource(fakeResourcePath)) {
-                return false;
-            }
-            if (resourceQuery && !resourceQuery(query)) {
-                return false;
-            }
-            return true;
-        } });
-    if (rule.rules) {
-        res.rules = rule.rules.map(cloneRule);
-    }
-    if (rule.oneOf) {
-        res.oneOf = rule.oneOf.map(cloneRule);
+
+function cloneRule (rawRule, refs) {
+    const rules = ruleSetCompiler.compileRules('ruleSet', [{
+        rules: [rawRule]
+    }], refs)
+    let currentResource
+
+    const conditions = rules[0].rules
+        .map(rule => rule.conditions)
+        // shallow flat
+        .reduce((prev, next) => prev.concat(next), [])
+
+    // do not process rule with enforce
+    if (!rawRule.enforce) {
+        const ruleUse = rules[0].rules
+            .map(rule => rule.effects
+                .filter(effect => effect.type === 'use')
+                .map(effect => effect.value)
+            )
+            // shallow flat
+            .reduce((prev, next) => prev.concat(next), [])
+
+        // fix conflict with config.loader and config.options when using config.use
+        delete rawRule.loader
+        delete rawRule.options
+        rawRule.use = ruleUse
     }
-    return res;
-}
-function cloneRuleForRenderFn(rule) {
-    const resource = rule.resource;
-    const resourceQuery = rule.resourceQuery;
-    let currentResource;
-    const res = Object.assign(Object.assign({}, rule), { resource: {
-            test: (resource) => {
-                currentResource = resource;
-                return true;
-            }
-        }, resourceQuery: (query) => {
-            const parsed = querystring_1.default.parse(query.slice(1));
-            if (parsed.vue == null || parsed.type !== 'template') {
-                return false;
+
+    const res = Object.assign({}, rawRule, {
+        resource: resources => {
+            currentResource = resources
+            return true
+        },
+        resourceQuery: query => {
+            const parsed = qs.parse(query.slice(1))
+            if (parsed.vue == null) {
+                return false
             }
-            const fakeResourcePath = `${currentResource}.js`;
-            if (resource && !resource(fakeResourcePath)) {
-                return false;
+            if (!conditions) {
+                return false
             }
-            if (resourceQuery && !resourceQuery(query)) {
-                return false;
+            const fakeResourcePath = `${currentResource}.${parsed.lang}`
+            for (const condition of conditions) {
+                // add support for resourceQuery
+                const request = condition.property === 'resourceQuery' ? query : fakeResourcePath
+                if (condition && !condition.fn(request)) {
+                    return false
+                }
             }
-            return true;
-        } });
-    if (rule.rules) {
-        res.rules = rule.rules.map(cloneRuleForRenderFn);
+            return true
+        }
+    })
+
+    delete res.test
+
+    if (rawRule.rules) {
+        res.rules = rawRule.rules.map(rule => cloneRule(rule, refs))
     }
-    if (rule.oneOf) {
-        res.oneOf = rule.oneOf.map(cloneRuleForRenderFn);
+
+    if (rawRule.oneOf) {
+        res.oneOf = rawRule.oneOf.map(rule => cloneRule(rule, refs))
     }
-    return res;
+
+    return res
 }
-module.exports = VueLoaderPlugin;
+
+VueLoaderPlugin.NS = NS
+module.exports = VueLoaderPlugin
